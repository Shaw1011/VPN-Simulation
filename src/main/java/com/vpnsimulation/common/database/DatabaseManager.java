package com.vpnsimulation.common.database;

import java.sql.Connection;
import java.sql.Date;
import java.sql.DriverManager;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.sql.Statement;
import java.util.ArrayList;
import java.util.List;

/**
 * Manages database operations for the VPN simulation
 */
public class DatabaseManager {
    
    private static final String DB_URL = "jdbc:sqlite:vpn_logs.db";
    private Connection connection;
    
    /**
     * Initializes the database connection and creates tables if they don't exist
     */
    public void initialize() throws SQLException {
        connection = DriverManager.getConnection(DB_URL);
        createTablesIfNotExist();
    }
    
    /**
     * Creates necessary tables for the VPN simulation
     */
    private void createTablesIfNotExist() throws SQLException {
        try (Statement statement = connection.createStatement()) {
            // Create connections table
            statement.execute(
                    "CREATE TABLE IF NOT EXISTS connections (" +
                    "id INTEGER PRIMARY KEY AUTOINCREMENT, " +
                    "client_id TEXT NOT NULL, " +
                    "client_ip TEXT NOT NULL, " +
                    "connection_time TIMESTAMP DEFAULT CURRENT_TIMESTAMP, " +
                    "disconnection_time TIMESTAMP, " +
                    "connection_status TEXT DEFAULT 'active'" +
                    ")");
            
            // Create data_transfers table
            statement.execute(
                    "CREATE TABLE IF NOT EXISTS data_transfers (" +
                    "id INTEGER PRIMARY KEY AUTOINCREMENT, " +
                    "connection_id INTEGER, " +
                    "timestamp TIMESTAMP DEFAULT CURRENT_TIMESTAMP, " +
                    "source_ip TEXT NOT NULL, " +
                    "destination_ip TEXT NOT NULL, " +
                    "data_size INTEGER, " +
                    "is_encrypted BOOLEAN, " +
                    "packet_type TEXT, " +
                    "FOREIGN KEY (connection_id) REFERENCES connections(id)" +
                    ")");
            
            // Create security_events table
            statement.execute(
                    "CREATE TABLE IF NOT EXISTS security_events (" +
                    "id INTEGER PRIMARY KEY AUTOINCREMENT, " +
                    "connection_id INTEGER, " +
                    "timestamp TIMESTAMP DEFAULT CURRENT_TIMESTAMP, " +
                    "event_type TEXT NOT NULL, " +
                    "description TEXT, " +
                    "severity TEXT, " +
                    "FOREIGN KEY (connection_id) REFERENCES connections(id)" +
                    ")");
        }
    }
    
    /**
     * Logs a new client connection
     * @return the connection ID generated by the database
     */
    public int logConnection(String clientId, String clientIp) throws SQLException {
        try (PreparedStatement statement = connection.prepareStatement(
                "INSERT INTO connections (client_id, client_ip) VALUES (?, ?)",
                Statement.RETURN_GENERATED_KEYS)) {
            
            statement.setString(1, clientId);
            statement.setString(2, clientIp);
            statement.executeUpdate();
            
            try (ResultSet generatedKeys = statement.getGeneratedKeys()) {
                return generatedKeys.next() ? generatedKeys.getInt(1) : -1;
            }
        }
    }
    
    /**
     * Logs a client disconnection
     */
    public void logDisconnection(int connectionId) throws SQLException {
        try (PreparedStatement statement = connection.prepareStatement(
                "UPDATE connections SET disconnection_time = CURRENT_TIMESTAMP, " +
                "connection_status = 'disconnected' WHERE id = ?")) {
            
            statement.setInt(1, connectionId);
            statement.executeUpdate();
        }
    }
    
    /**
     * Logs a data transfer
     */
    public void logDataTransfer(int connectionId, String sourceIp, String destinationIp, 
                               int dataSize, boolean isEncrypted, String packetType) throws SQLException {
        try (PreparedStatement statement = connection.prepareStatement(
                "INSERT INTO data_transfers (connection_id, source_ip, destination_ip, " +
                "data_size, is_encrypted, packet_type) VALUES (?, ?, ?, ?, ?, ?)")) {
            
            statement.setInt(1, connectionId);
            statement.setString(2, sourceIp);
            statement.setString(3, destinationIp);
            statement.setInt(4, dataSize);
            statement.setBoolean(5, isEncrypted);
            statement.setString(6, packetType);
            
            statement.executeUpdate();
        }
    }
    
    /**
     * Logs a security event
     */
    public void logSecurityEvent(int connectionId, String eventType, 
                               String description, String severity) throws SQLException {
        try (PreparedStatement statement = connection.prepareStatement(
                "INSERT INTO security_events (connection_id, event_type, description, severity) " +
                "VALUES (?, ?, ?, ?)")) {
            
            statement.setInt(1, connectionId);
            statement.setString(2, eventType);
            statement.setString(3, description);
            statement.setString(4, severity);
            
            statement.executeUpdate();
        }
    }
    
    /**
     * Retrieves connection logs within a date range
     */
    public List<ConnectionLog> getConnectionLogs(Date startDate, Date endDate) throws SQLException {
        List<ConnectionLog> logs = new ArrayList<>();
        
        try (PreparedStatement statement = connection.prepareStatement(
                "SELECT * FROM connections WHERE connection_time BETWEEN ? AND ? ORDER BY connection_time DESC")) {
            
            statement.setDate(1, startDate);
            statement.setDate(2, endDate);
            
            try (ResultSet resultSet = statement.executeQuery()) {
                while (resultSet.next()) {
                    ConnectionLog log = new ConnectionLog();
                    log.setId(resultSet.getInt("id"));
                    log.setClientId(resultSet.getString("client_id"));
                    log.setClientIp(resultSet.getString("client_ip"));
                    log.setConnectionTime(resultSet.getTimestamp("connection_time"));
                    log.setDisconnectionTime(resultSet.getTimestamp("disconnection_time"));
                    log.setConnectionStatus(resultSet.getString("connection_status"));
                    
                    logs.add(log);
                }
            }
        }
        
        return logs;
    }
    
    /**
     * Retrieves data transfer logs for a specific connection
     */
    public List<DataTransferLog> getDataTransferLogs(int connectionId) throws SQLException {
        List<DataTransferLog> logs = new ArrayList<>();
        
        try (PreparedStatement statement = connection.prepareStatement(
                "SELECT * FROM data_transfers WHERE connection_id = ? ORDER BY timestamp DESC")) {
            
            statement.setInt(1, connectionId);
            
            try (ResultSet resultSet = statement.executeQuery()) {
                while (resultSet.next()) {
                    DataTransferLog log = new DataTransferLog();
                    log.setId(resultSet.getInt("id"));
                    log.setConnectionId(resultSet.getInt("connection_id"));
                    log.setTimestamp(resultSet.getTimestamp("timestamp"));
                    log.setSourceIp(resultSet.getString("source_ip"));
                    log.setDestinationIp(resultSet.getString("destination_ip"));
                    log.setDataSize(resultSet.getInt("data_size"));
                    log.setEncrypted(resultSet.getBoolean("is_encrypted"));
                    log.setPacketType(resultSet.getString("packet_type"));
                    
                    logs.add(log);
                }
            }
        }
        
        return logs;
    }
    
    /**
     * Retrieves security event logs for a specific connection
     */
    public List<SecurityEventLog> getSecurityEventLogs(int connectionId) throws SQLException {
        List<SecurityEventLog> logs = new ArrayList<>();
        
        try (PreparedStatement statement = connection.prepareStatement(
                "SELECT * FROM security_events WHERE connection_id = ? ORDER BY timestamp DESC")) {
            
            statement.setInt(1, connectionId);
            
            try (ResultSet resultSet = statement.executeQuery()) {
                while (resultSet.next()) {
                    SecurityEventLog log = new SecurityEventLog();
                    log.setId(resultSet.getInt("id"));
                    log.setConnectionId(resultSet.getInt("connection_id"));
                    log.setTimestamp(resultSet.getTimestamp("timestamp"));
                    log.setEventType(resultSet.getString("event_type"));
                    log.setDescription(resultSet.getString("description"));
                    log.setSeverity(resultSet.getString("severity"));
                    
                    logs.add(log);
                }
            }
        }
        
        return logs;
    }
    
    /**
     * Retrieves all data transfer logs
     */
    public List<DataTransferLog> getAllDataTransferLogs() throws SQLException {
        List<DataTransferLog> logs = new ArrayList<>();
        
        try (PreparedStatement statement = connection.prepareStatement(
                "SELECT * FROM data_transfers ORDER BY timestamp DESC")) {
            
            try (ResultSet resultSet = statement.executeQuery()) {
                while (resultSet.next()) {
                    DataTransferLog log = new DataTransferLog();
                    log.setId(resultSet.getInt("id"));
                    log.setConnectionId(resultSet.getInt("connection_id"));
                    log.setTimestamp(resultSet.getTimestamp("timestamp"));
                    log.setSourceIp(resultSet.getString("source_ip"));
                    log.setDestinationIp(resultSet.getString("destination_ip"));
                    log.setDataSize(resultSet.getInt("data_size"));
                    log.setEncrypted(resultSet.getBoolean("is_encrypted"));
                    log.setPacketType(resultSet.getString("packet_type"));
                    
                    logs.add(log);
                }
            }
        }
        
        return logs;
    }
    
    /**
     * Closes the database connection
     */
    public void close() throws SQLException {
        if (connection != null && !connection.isClosed()) {
            connection.close();
        }
    }
}
